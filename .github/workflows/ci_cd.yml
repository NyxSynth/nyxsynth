name: NyxSynth CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      run_security_scan:
        description: 'Run security scan'
        required: false
        default: false
        type: boolean

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit
        pip install -r requirements.txt
        
    - name: Check formatting with Black
      run: |
        black --check .
        
    - name: Check imports with isort
      run: |
        isort --check-only --profile black .
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports blockchain contracts api

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    if: ${{ github.event_name == 'pull_request' || inputs.run_security_scan }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
        
    - name: Run Bandit security scan
      run: |
        bandit -r . -x tests/ -f json -o bandit_results.json
        
    - name: Check dependencies for vulnerabilities
      run: |
        safety check
        
    - name: Run custom security checks
      run: |
        python scripts/security_checks.py
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          bandit_results.json
          security_report.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt
        
    - name: Run unit tests
      run: |
        pytest tests/test_*.py --cov=. --cov-report=xml
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests
        pip install -r requirements.txt
        
    - name: Run integration tests
      run: |
        python tests/integration_tests.py
        
    - name: Run API integration tests
      run: |
        python tests/integration_tests.py --api

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --passWithNoTests
        
    - name: Upload frontend build
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, build-frontend]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/build
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,format=short
    
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}-backend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'workflow_dispatch' && inputs.deploy_environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Download Docker Compose file
      run: |
        mkdir -p deploy
        aws s3 cp s3://${{ secrets.DEPLOY_BUCKET }}/staging/docker-compose.yml deploy/
        aws s3 cp s3://${{ secrets.DEPLOY_BUCKET }}/staging/.env deploy/
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Pull the latest images
          docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}-backend
          docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}-frontend
          
          # Update the docker-compose.yml
          cd ~/nyxsynth
          aws s3 cp s3://${{ secrets.DEPLOY_BUCKET }}/staging/docker-compose.yml ./
          aws s3 cp s3://${{ secrets.DEPLOY_BUCKET }}/staging/.env ./
          
          # Update image tags in docker-compose.yml
          sed -i 's|image: ghcr.io/${{ github.repository }}:.*-backend|image: ghcr.io/${{ github.repository }}:${{ github.sha }}-backend|g' docker-compose.yml
          sed -i 's|image: ghcr.io/${{ github.repository }}:.*-frontend|image: ghcr.io/${{ github.repository }}:${{ github.sha }}-frontend|g' docker-compose.yml
          
          # Restart the services
          docker-compose down
          docker-compose up -d
          
          # Verify services are running
          docker-compose ps
    
    - name: Run smoke tests
      run: |
        sleep 30  # Wait for services to start
        curl -f https://staging.nyxsynth.com/api/health

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && inputs.deploy_environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Download Docker Compose file
      run: |
        mkdir -p deploy
        aws s3 cp s3://${{ secrets.DEPLOY_BUCKET }}/production/docker-compose.yml deploy/
        aws s3 cp s3://${{ secrets.DEPLOY_BUCKET }}/production/.env deploy/
    
    - name: Deploy to EC2 Cluster
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Pull the latest images
          docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}-backend
          docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}-frontend
          
          # Update the docker-compose.yml
          cd ~/nyxsynth
          aws s3 cp s3://${{ secrets.DEPLOY_BUCKET }}/production/docker-compose.yml ./
          aws s3 cp s3://${{ secrets.DEPLOY_BUCKET }}/production/.env ./
          
          # Update image tags in docker-compose.yml
          sed -i 's|image: ghcr.io/${{ github.repository }}:.*-backend|image: ghcr.io/${{ github.repository }}:${{ github.sha }}-backend|g' docker-compose.yml
          sed -i 's|image: ghcr.io/${{ github.repository }}:.*-frontend|image: ghcr.io/${{ github.repository }}:${{ github.sha }}-frontend|g' docker-compose.yml
          
          # Restart the services
          docker-compose down
          docker-compose up -d
          
          # Verify services are running
          docker-compose ps
    
    - name: Run smoke tests
      run: |
        sleep 30  # Wait for services to start
        curl -f https://nyxsynth.com/api/health
    
    - name: Create release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Release of NyxSynth v${{ github.run_number }}
          
          Deployed to production on ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: false

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify staging deployment
      if: needs.deploy-staging.result == 'success'
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "text": "✅ Successfully deployed NyxSynth to staging environment!"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify production deployment
      if: needs.deploy-production.result == 'success'
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "text": "🚀 Successfully deployed NyxSynth to production environment!"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify deployment failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "text": "❌ NyxSynth deployment failed! Check the GitHub Actions logs for details."
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
